/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

#include <cstdio>
#include <fstream>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>

#include "dbtool.h"
#include "gtest/gtest.h"

extern std::string g_working_dir_path;

namespace nss_test {

const std::vector<std::string> kDbFiles({"key3.db", "cert8.db", "secmod.db"});

const unsigned int certificateDerDataLength = 865;
const char *certificateDerData =
    "\x30\x82\x03\x5D\x30\x82\x02\x45\xA0\x03\x02\x01\x02\x02\x09\x00"
    "\x83\x44\x64\xF6\x74\x94\x45\xE8\x30\x0D\x06\x09\x2A\x86\x48\x86"
    "\xF7\x0D\x01\x01\x0B\x05\x00\x30\x45\x31\x0B\x30\x09\x06\x03\x55"
    "\x04\x06\x13\x02\x41\x55\x31\x13\x30\x11\x06\x03\x55\x04\x08\x0C"
    "\x0A\x53\x6F\x6D\x65\x2D\x53\x74\x61\x74\x65\x31\x21\x30\x1F\x06"
    "\x03\x55\x04\x0A\x0C\x18\x49\x6E\x74\x65\x72\x6E\x65\x74\x20\x57"
    "\x69\x64\x67\x69\x74\x73\x20\x50\x74\x79\x20\x4C\x74\x64\x30\x1E"
    "\x17\x0D\x31\x36\x31\x32\x31\x37\x31\x33\x33\x34\x31\x37\x5A\x17"
    "\x0D\x31\x37\x31\x32\x31\x37\x31\x33\x33\x34\x31\x37\x5A\x30\x45"
    "\x31\x0B\x30\x09\x06\x03\x55\x04\x06\x13\x02\x41\x55\x31\x13\x30"
    "\x11\x06\x03\x55\x04\x08\x0C\x0A\x53\x6F\x6D\x65\x2D\x53\x74\x61"
    "\x74\x65\x31\x21\x30\x1F\x06\x03\x55\x04\x0A\x0C\x18\x49\x6E\x74"
    "\x65\x72\x6E\x65\x74\x20\x57\x69\x64\x67\x69\x74\x73\x20\x50\x74"
    "\x79\x20\x4C\x74\x64\x30\x82\x01\x22\x30\x0D\x06\x09\x2A\x86\x48"
    "\x86\xF7\x0D\x01\x01\x01\x05\x00\x03\x82\x01\x0F\x00\x30\x82\x01"
    "\x0A\x02\x82\x01\x01\x00\xEF\x14\x35\x7E\xC0\x2B\x2C\x16\x73\xAE"
    "\xD1\x82\x28\x38\xE3\xCD\xAE\xF3\x70\x6C\xFE\xA2\x48\x4B\xA0\xA8"
    "\x6F\x30\x0A\x71\x70\xA7\x2F\x1C\xE0\xF0\xC1\x0B\x13\x02\x7A\xFD"
    "\x46\x99\x7E\xF0\xDE\xEA\x52\xD3\x59\x06\x69\x12\xCC\xD1\xED\xF9"
    "\x84\xBE\x61\x60\xBE\x4E\x3B\xB9\xED\xF5\x9C\xF6\x65\xCC\x63\xFA"
    "\xBE\x70\x08\xA6\xF7\xD3\x20\x1F\xBD\x2C\x18\x1A\x84\xEF\x71\x9F"
    "\x4B\xAF\x22\x7E\xAB\xDE\x1F\xBB\x33\x81\x69\xFA\xD6\x46\x19\x73"
    "\x53\xE4\x41\x07\x9C\xC1\xCE\x60\x59\x7F\x6C\x7F\x7E\x5B\xCC\x25"
    "\x03\x6B\xC2\x4B\xC4\x95\x38\x53\xB3\x7A\x92\x9B\x07\xE7\x31\x9A"
    "\x28\x32\x05\xAF\xD8\xD2\x1D\x33\xA8\x7D\x80\x95\x90\xFB\xB6\x66"
    "\x49\xDB\x04\x66\x49\x39\xB8\x07\xBF\x9B\xFC\xCC\xEF\x39\x5D\xD4"
    "\x3D\x43\x2A\x5D\xB0\x4D\xA5\xBA\xAA\x1D\x68\x41\x73\xEE\x98\x22"
    "\x9F\x32\x05\x90\xC0\x81\xC0\xC9\xF2\xDD\x51\x6B\x92\xB7\xF3\xFA"
    "\xBA\x31\x6F\x37\xB9\xA2\x28\x16\x5F\xA3\x09\x65\x47\x76\xDB\x6E"
    "\x23\xAD\x7D\x51\x3F\x9B\xDD\x7E\xAA\x48\x4C\x2E\x4C\x05\xB7\xDA"
    "\x51\x55\xB3\xF5\x53\xBB\x57\x55\x22\xAE\xEE\x6D\xB0\x32\x91\x49"
    "\x65\x37\x82\xFE\x41\x99\x02\x03\x01\x00\x01\xA3\x50\x30\x4E\x30"
    "\x1D\x06\x03\x55\x1D\x0E\x04\x16\x04\x14\x70\x37\xF0\x7B\x49\xEA"
    "\xB5\x5D\xFE\x3D\x1F\x7E\x31\x38\x4C\xCB\xEB\x11\xA0\xF5\x30\x1F"
    "\x06\x03\x55\x1D\x23\x04\x18\x30\x16\x80\x14\x70\x37\xF0\x7B\x49"
    "\xEA\xB5\x5D\xFE\x3D\x1F\x7E\x31\x38\x4C\xCB\xEB\x11\xA0\xF5\x30"
    "\x0C\x06\x03\x55\x1D\x13\x04\x05\x30\x03\x01\x01\xFF\x30\x0D\x06"
    "\x09\x2A\x86\x48\x86\xF7\x0D\x01\x01\x0B\x05\x00\x03\x82\x01\x01"
    "\x00\x73\x01\x03\xE7\x53\xE7\x62\xBF\x9B\x84\x66\x74\xA3\xD5\xBE"
    "\x49\x9E\x4D\x11\x36\x16\x99\x0F\x0E\x4A\x3B\x4C\x27\x18\x2D\xB9"
    "\x89\x5D\x96\x5E\x0F\x50\x90\xFC\xA8\xB0\x9C\x31\xBA\x91\x27\xAF"
    "\xCE\x96\x48\x4D\xB1\xBB\xDF\x86\xE2\x9D\xB2\x1B\xCA\xD9\xEF\x28"
    "\xBC\xE9\x99\x0F\x0E\x8E\x6D\x4D\x00\xA3\x0A\x3B\xA6\xC5\x69\xA4"
    "\xDE\x41\xFD\x12\x52\x9D\x78\x02\x95\x90\x84\xA8\xCC\xA2\x62\xA9"
    "\x77\xF3\xA6\x93\xD6\x41\x99\x80\x5B\xE9\xFC\x62\x8C\x74\x5D\x1C"
    "\x56\xE2\x97\x0C\x44\x1C\xD1\x82\x2E\x75\xAF\xB5\xA7\xDA\x87\x0E"
    "\x49\xC0\x57\x51\xD7\x42\xBD\x4A\xBC\x7C\xC2\x97\x08\x02\x5C\x40"
    "\xAC\x9A\x92\x13\xC1\x01\xEF\xAD\x6A\x17\x26\x1A\x45\x58\x26\xFB"
    "\x27\xBE\x74\xEF\xA6\x21\x9C\x6B\xC3\x67\x60\xD8\xC7\xA3\xE1\x5F"
    "\x16\x99\x0B\xC3\xD8\xC1\x40\xDA\xF0\xC1\x33\xD2\xAC\x80\xF7\xD7"
    "\xA2\x05\x18\x76\xAF\x58\x8F\x09\xF5\xF2\xDF\x17\x48\x2B\xC5\xF8"
    "\xE4\x09\x0F\x0D\x97\xBF\xCC\x4D\x50\xBE\x70\xA6\xE5\xD6\xFD\x8C"
    "\x29\x49\x3F\x7C\x5E\x1B\x7F\x02\xA3\xA9\x86\xC1\xE9\x32\x25\x53"
    "\x3E\x81\xF9\x95\x20\x55\x09\x9F\x9B\x9D\xE3\x1A\xF3\x2E\x23\xAC"
    "\x0E";

const unsigned int rsaPrivateKeyLength = 345;
const char *rsaPrivateKey =
    "\x30\x82\x01\x55\x02\x01\x00\x30\x0D\x06\x09\x2A\x86\x48\x86\xF7"
    "\x0D\x01\x01\x01\x05\x00\x04\x82\x01\x3F\x30\x82\x01\x3B\x02\x01"
    "\x00\x02\x41\x00\xBD\xC5\xE9\x32\x1C\xDC\x91\x18\xB2\xE8\x28\xF9"
    "\xAD\x9F\x3D\x4D\xD6\xF8\x4A\x6F\xFC\x57\x88\x5F\x6D\x43\x0B\xCE"
    "\x96\x62\x7A\x45\xB5\x6E\x2C\xAC\x5B\x73\xDA\x83\x54\xCF\x22\xD4"
    "\xCC\x31\xD9\x75\xBF\xA4\xFF\xFF\x1D\x71\x3D\xC8\x00\xEC\xD4\x52"
    "\x2D\xD1\xD9\xE3\x02\x03\x01\x00\x01\x02\x41\x00\x8E\x1F\x3E\xE2"
    "\xA9\xDC\xC1\xC9\x86\x8A\xF9\xCC\xEB\x2B\x5B\xA5\x04\xFE\x93\xF8"
    "\xC4\x39\xE5\xC6\xD9\xB4\x21\x8E\x88\xEF\x9D\x73\x77\x15\xAC\xC6"
    "\x08\x41\x57\xBE\x9B\x88\x05\xC2\x55\x7D\xA2\x09\x4B\xD6\x01\x08"
    "\xC3\xB3\xCE\xB0\x2D\x3B\x4F\xA4\xDA\x15\xA7\x39\x02\x21\x00\xE0"
    "\xB8\x35\x56\xE8\xF0\x54\x21\x65\x2E\x32\x5C\xCD\x4C\xF3\xA9\x0C"
    "\x97\x8E\xC5\x03\xDB\xA2\xFF\xF3\x94\x7D\xB8\x65\x01\xDC\x35\x02"
    "\x21\x00\xD8\x30\x66\x21\x79\xEC\x6E\x82\x81\xF8\xE1\xEF\x7A\xBE"
    "\xBD\xA7\x48\x0D\x79\x69\x6F\x70\x97\x3D\x6E\x30\xD5\x7D\xD2\xD5"
    "\xB0\xB7\x02\x21\x00\x8F\xB5\x5D\xEF\x19\x82\x6F\xDA\xF7\x70\xC6"
    "\xA6\x50\x68\x70\xBE\x60\x1E\x20\x20\x60\x2A\x3A\xA0\x42\x6E\x68"
    "\xC3\xDE\x5C\x85\x2D\x02\x20\x03\xE5\x53\x61\xD5\x0D\xA2\xAC\x2D"
    "\x65\x6B\xC4\xE2\x04\x5F\xEC\x8C\xCA\xD9\x5E\x42\x08\xD8\x60\xDE"
    "\x04\x79\x44\x6C\x31\x37\x9F\x02\x20\x60\x9C\x69\xFA\x11\xAD\x42"
    "\xAC\x33\xAE\x88\x4A\x0D\x08\x4C\x8D\x38\x1B\xD5\x7F\xC3\xEC\x0C"
    "\xC7\xDD\x70\x8C\x41\x01\xF9\x00\x73";

unsigned int ecPrivateKeyLength = 138;
const char *ecPrivateKey =
    "\x30\x81\x87\x02\x01\x00\x30\x13\x06\x07\x2A\x86\x48\xCE\x3D\x02"
    "\x01\x06\x08\x2A\x86\x48\xCE\x3D\x03\x01\x07\x04\x6D\x30\x6B\x02"
    "\x01\x01\x04\x20\xC9\xAF\xA9\xD8\x45\xBA\x75\x16\x6B\x5C\x21\x57"
    "\x67\xB1\xD6\x93\x4E\x50\xC3\xDB\x36\xE8\x9B\x12\x7B\x8A\x62\x2B"
    "\x12\x0F\x67\x21\xA1\x44\x03\x42\x00\x04\x60\xFE\xD4\xBA\x25\x5A"
    "\x9D\x31\xC9\x61\xEB\x74\xC6\x35\x6D\x68\xC0\x49\xB8\x92\x3B\x61"
    "\xFA\x6C\xE6\x69\x62\x2E\x60\xF2\x9F\xB6\x79\x03\xFE\x10\x08\xB8"
    "\xBC\x99\xA4\x1A\xE9\xE9\x56\x28\xBC\x64\xF2\xF1\xB2\x0C\x2D\x7E"
    "\x9F\x51\x77\xA3\xC2\x94\xD4\x46\x22\x99";

class DBToolTest : public ::testing::Test {};

#if defined(__unix__) || defined(__APPLE__)
const std::string pathSep("/");
#else
const std::string pathSep("\\");
#endif

static void CreateDBFiles() {
  std::cout << "Creating db files in working dir: " << g_working_dir_path
            << std::endl;

  std::istringstream passwordInput("a\na\n");
  auto cinBuffer = std::cin.rdbuf();
  std::cin.rdbuf(passwordInput.rdbuf());

  const std::vector<std::string> arguments = {"--create", "--path",
                                              g_working_dir_path};
  DBTool tool;
  EXPECT_TRUE(tool.Run(arguments));

  std::cin.rdbuf(cinBuffer);
}

static void RemoveDBFiles() {
  std::cout << "Removing db files..." << std::endl;

  for (auto const &value : kDbFiles) {
    std::string dbFilePath = g_working_dir_path + pathSep + value;
    std::remove(dbFilePath.c_str());
  }
}

static std::string CreateTempFile(const char *data,
                                  const unsigned int dataLength) {
  std::string tmpFilePath = g_working_dir_path + pathSep + "tempfile";
  std::ofstream outfile(tmpFilePath, std::ofstream::binary);
  outfile.write(data, dataLength);
  outfile.close();

  return tmpFilePath;
}

static void RunTool(const std::vector<std::string> arguments) {
  CreateDBFiles();

  DBTool tool;
  EXPECT_TRUE(tool.Run(arguments));

  RemoveDBFiles();
}

static void RunToolWithModifiedCin(std::istringstream &passwordInput,
                                   const std::vector<std::string> arguments) {
  CreateDBFiles();

  auto cinBuffer = std::cin.rdbuf();
  std::cin.rdbuf(passwordInput.rdbuf());

  DBTool tool;
  EXPECT_TRUE(tool.Run(arguments));

  std::cin.rdbuf(cinBuffer);
  RemoveDBFiles();
}

static void ImportKeyTest(const char *keyData, const unsigned int keyLength,
                          std::string keyName) {
  std::istringstream passwordInput("a\n");
  std::string keyToImportPath = CreateTempFile(keyData, keyLength);
  const std::vector<std::string> arguments = {
      "--import-key", keyToImportPath, "--name",
      keyName,        "--path",        g_working_dir_path};
  RunToolWithModifiedCin(passwordInput, arguments);

  std::remove(keyToImportPath.c_str());
}

TEST_F(DBToolTest, DBCreateTest) {
  CreateDBFiles();
  RemoveDBFiles();
}

TEST_F(DBToolTest, ListCerts) {
  const std::vector<std::string> arguments = {"--list-certs", "--path",
                                              g_working_dir_path};
  RunTool(arguments);
}

TEST_F(DBToolTest, ListKeys) {
  std::istringstream passwordInput("a\n");
  const std::vector<std::string> arguments = {"--list-keys", "--path",
                                              g_working_dir_path};
  RunToolWithModifiedCin(passwordInput, arguments);
}

TEST_F(DBToolTest, ChangePassword) {
  std::istringstream passwordInput("a\nnewPw\nnewPw\n");
  const std::vector<std::string> arguments = {"--change-password", "--path",
                                              g_working_dir_path};
  RunToolWithModifiedCin(passwordInput, arguments);
}

TEST_F(DBToolTest, ImportCert) {
  std::string certToImportPath =
      CreateTempFile(certificateDerData, certificateDerDataLength);
  const std::vector<std::string> arguments = {
      "--import-cert", certToImportPath, "--name",
      "myCert",        "--path",         g_working_dir_path};
  RunTool(arguments);

  std::remove(certToImportPath.c_str());
}

TEST_F(DBToolTest, ImportListDeleteCert) {
  CreateDBFiles();

  std::string certName("myCert");
  std::string certToImportPath =
      CreateTempFile(certificateDerData, certificateDerDataLength);
  const std::vector<std::string> importCertArguments = {
      "--import-cert", certToImportPath, "--name",
      certName,        "--path",         g_working_dir_path};

  DBTool tool;
  EXPECT_TRUE(tool.Run(importCertArguments));

  std::remove(certToImportPath.c_str());

  const std::vector<std::string> listCertArguments = {"--list-certs", "--path",
                                                      g_working_dir_path};
  EXPECT_TRUE(tool.Run(listCertArguments));

  const std::vector<std::string> deleteCertArguments = {
      "--delete-cert", certName, "--path", g_working_dir_path};
  EXPECT_TRUE(tool.Run(deleteCertArguments));

  RemoveDBFiles();
}

TEST_F(DBToolTest, ImportListDeleteKey) {
  CreateDBFiles();

  std::string keyName("myKey");
  std::string keyToImportPath =
      CreateTempFile(rsaPrivateKey, rsaPrivateKeyLength);
  const std::vector<std::string> importKeyArguments = {
      "--import-key", keyToImportPath, "--name",
      keyName,        "--path",        g_working_dir_path};

  std::istringstream passwordInput("a\na\n");
  auto cinBuffer = std::cin.rdbuf();
  std::cin.rdbuf(passwordInput.rdbuf());

  DBTool tool;
  EXPECT_TRUE(tool.Run(importKeyArguments));
  std::remove(keyToImportPath.c_str());

  const std::vector<std::string> listKeyArguments = {"--list-keys", "--path",
                                                     g_working_dir_path};
  tool.Run(listKeyArguments);

  const std::vector<std::string> deleteKeyArguments = {
      "--delete-key", keyName, "--path", g_working_dir_path};
  tool.Run(deleteKeyArguments);

  std::cin.rdbuf(cinBuffer);
  RemoveDBFiles();
}

TEST_F(DBToolTest, ImportRsaKey) {
  ImportKeyTest(rsaPrivateKey, rsaPrivateKeyLength, "rsaKey");
}

TEST_F(DBToolTest, ImportECKey) {
  ImportKeyTest(ecPrivateKey, ecPrivateKeyLength, "ecKey");
}

TEST_F(DBToolTest, WrongPathTest) {
  const std::vector<std::string> arguments = {"--create", "--path", "/foo"};
  DBTool tool;
  EXPECT_FALSE(tool.Run(arguments));
}

TEST_F(DBToolTest, WrongPassword) {
  CreateDBFiles();

  std::istringstream passwordInput("wrongPassword\n");
  const std::vector<std::string> arguments = {"--list-keys", "--path",
                                              g_working_dir_path};
  auto cinBuffer = std::cin.rdbuf();
  std::cin.rdbuf(passwordInput.rdbuf());

  DBTool tool;
  EXPECT_FALSE(tool.Run(arguments));

  std::cin.rdbuf(cinBuffer);
  RemoveDBFiles();
}

}  // namespace nss_test
