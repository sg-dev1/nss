/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

#include <cstdio>
#include <fstream>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>

#include <hasht.h>  // contains supported digest types
#include <nss.h>
#include <pk11pub.h>
#include <prerror.h>
#include <ctime>
#include "scoped_ptrs.h"

#include "dbtool.h"
#include "gtest/gtest.h"

extern std::string g_working_dir_path;

namespace nss_test {

const std::vector<std::string> kDbFiles({"key3.db", "cert8.db", "secmod.db"});

#if defined(__unix__) || defined(__APPLE__)
const std::string pathSep("/");
#else
const std::string pathSep("\\");
#endif

const uint8_t kCertificateDerData[] = {
    0x30, 0x82, 0x03, 0x5d, 0x30, 0x82, 0x02, 0x45, 0xa0, 0x03, 0x02, 0x01,
    0x02, 0x02, 0x09, 0x00, 0x83, 0x44, 0x64, 0xf6, 0x74, 0x94, 0x45, 0xe8,
    0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01,
    0x0b, 0x05, 0x00, 0x30, 0x45, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55,
    0x04, 0x06, 0x13, 0x02, 0x41, 0x55, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03,
    0x55, 0x04, 0x08, 0x0c, 0x0a, 0x53, 0x6f, 0x6d, 0x65, 0x2d, 0x53, 0x74,
    0x61, 0x74, 0x65, 0x31, 0x21, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x04, 0x0a,
    0x0c, 0x18, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x20, 0x57,
    0x69, 0x64, 0x67, 0x69, 0x74, 0x73, 0x20, 0x50, 0x74, 0x79, 0x20, 0x4c,
    0x74, 0x64, 0x30, 0x1e, 0x17, 0x0d, 0x31, 0x36, 0x31, 0x32, 0x31, 0x37,
    0x31, 0x33, 0x33, 0x34, 0x31, 0x37, 0x5a, 0x17, 0x0d, 0x31, 0x37, 0x31,
    0x32, 0x31, 0x37, 0x31, 0x33, 0x33, 0x34, 0x31, 0x37, 0x5a, 0x30, 0x45,
    0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x41,
    0x55, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x0a,
    0x53, 0x6f, 0x6d, 0x65, 0x2d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x31, 0x21,
    0x30, 0x1f, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x18, 0x49, 0x6e, 0x74,
    0x65, 0x72, 0x6e, 0x65, 0x74, 0x20, 0x57, 0x69, 0x64, 0x67, 0x69, 0x74,
    0x73, 0x20, 0x50, 0x74, 0x79, 0x20, 0x4c, 0x74, 0x64, 0x30, 0x82, 0x01,
    0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01,
    0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00, 0x30, 0x82, 0x01,
    0x0a, 0x02, 0x82, 0x01, 0x01, 0x00, 0xef, 0x14, 0x35, 0x7e, 0xc0, 0x2b,
    0x2c, 0x16, 0x73, 0xae, 0xd1, 0x82, 0x28, 0x38, 0xe3, 0xcd, 0xae, 0xf3,
    0x70, 0x6c, 0xfe, 0xa2, 0x48, 0x4b, 0xa0, 0xa8, 0x6f, 0x30, 0x0a, 0x71,
    0x70, 0xa7, 0x2f, 0x1c, 0xe0, 0xf0, 0xc1, 0x0b, 0x13, 0x02, 0x7a, 0xfd,
    0x46, 0x99, 0x7e, 0xf0, 0xde, 0xea, 0x52, 0xd3, 0x59, 0x06, 0x69, 0x12,
    0xcc, 0xd1, 0xed, 0xf9, 0x84, 0xbe, 0x61, 0x60, 0xbe, 0x4e, 0x3b, 0xb9,
    0xed, 0xf5, 0x9c, 0xf6, 0x65, 0xcc, 0x63, 0xfa, 0xbe, 0x70, 0x08, 0xa6,
    0xf7, 0xd3, 0x20, 0x1f, 0xbd, 0x2c, 0x18, 0x1a, 0x84, 0xef, 0x71, 0x9f,
    0x4b, 0xaf, 0x22, 0x7e, 0xab, 0xde, 0x1f, 0xbb, 0x33, 0x81, 0x69, 0xfa,
    0xd6, 0x46, 0x19, 0x73, 0x53, 0xe4, 0x41, 0x07, 0x9c, 0xc1, 0xce, 0x60,
    0x59, 0x7f, 0x6c, 0x7f, 0x7e, 0x5b, 0xcc, 0x25, 0x03, 0x6b, 0xc2, 0x4b,
    0xc4, 0x95, 0x38, 0x53, 0xb3, 0x7a, 0x92, 0x9b, 0x07, 0xe7, 0x31, 0x9a,
    0x28, 0x32, 0x05, 0xaf, 0xd8, 0xd2, 0x1d, 0x33, 0xa8, 0x7d, 0x80, 0x95,
    0x90, 0xfb, 0xb6, 0x66, 0x49, 0xdb, 0x04, 0x66, 0x49, 0x39, 0xb8, 0x07,
    0xbf, 0x9b, 0xfc, 0xcc, 0xef, 0x39, 0x5d, 0xd4, 0x3d, 0x43, 0x2a, 0x5d,
    0xb0, 0x4d, 0xa5, 0xba, 0xaa, 0x1d, 0x68, 0x41, 0x73, 0xee, 0x98, 0x22,
    0x9f, 0x32, 0x05, 0x90, 0xc0, 0x81, 0xc0, 0xc9, 0xf2, 0xdd, 0x51, 0x6b,
    0x92, 0xb7, 0xf3, 0xfa, 0xba, 0x31, 0x6f, 0x37, 0xb9, 0xa2, 0x28, 0x16,
    0x5f, 0xa3, 0x09, 0x65, 0x47, 0x76, 0xdb, 0x6e, 0x23, 0xad, 0x7d, 0x51,
    0x3f, 0x9b, 0xdd, 0x7e, 0xaa, 0x48, 0x4c, 0x2e, 0x4c, 0x05, 0xb7, 0xda,
    0x51, 0x55, 0xb3, 0xf5, 0x53, 0xbb, 0x57, 0x55, 0x22, 0xae, 0xee, 0x6d,
    0xb0, 0x32, 0x91, 0x49, 0x65, 0x37, 0x82, 0xfe, 0x41, 0x99, 0x02, 0x03,
    0x01, 0x00, 0x01, 0xa3, 0x50, 0x30, 0x4e, 0x30, 0x1d, 0x06, 0x03, 0x55,
    0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x70, 0x37, 0xf0, 0x7b, 0x49, 0xea,
    0xb5, 0x5d, 0xfe, 0x3d, 0x1f, 0x7e, 0x31, 0x38, 0x4c, 0xcb, 0xeb, 0x11,
    0xa0, 0xf5, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30,
    0x16, 0x80, 0x14, 0x70, 0x37, 0xf0, 0x7b, 0x49, 0xea, 0xb5, 0x5d, 0xfe,
    0x3d, 0x1f, 0x7e, 0x31, 0x38, 0x4c, 0xcb, 0xeb, 0x11, 0xa0, 0xf5, 0x30,
    0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01,
    0xff, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01,
    0x01, 0x0b, 0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x73, 0x01, 0x03,
    0xe7, 0x53, 0xe7, 0x62, 0xbf, 0x9b, 0x84, 0x66, 0x74, 0xa3, 0xd5, 0xbe,
    0x49, 0x9e, 0x4d, 0x11, 0x36, 0x16, 0x99, 0x0f, 0x0e, 0x4a, 0x3b, 0x4c,
    0x27, 0x18, 0x2d, 0xb9, 0x89, 0x5d, 0x96, 0x5e, 0x0f, 0x50, 0x90, 0xfc,
    0xa8, 0xb0, 0x9c, 0x31, 0xba, 0x91, 0x27, 0xaf, 0xce, 0x96, 0x48, 0x4d,
    0xb1, 0xbb, 0xdf, 0x86, 0xe2, 0x9d, 0xb2, 0x1b, 0xca, 0xd9, 0xef, 0x28,
    0xbc, 0xe9, 0x99, 0x0f, 0x0e, 0x8e, 0x6d, 0x4d, 0x00, 0xa3, 0x0a, 0x3b,
    0xa6, 0xc5, 0x69, 0xa4, 0xde, 0x41, 0xfd, 0x12, 0x52, 0x9d, 0x78, 0x02,
    0x95, 0x90, 0x84, 0xa8, 0xcc, 0xa2, 0x62, 0xa9, 0x77, 0xf3, 0xa6, 0x93,
    0xd6, 0x41, 0x99, 0x80, 0x5b, 0xe9, 0xfc, 0x62, 0x8c, 0x74, 0x5d, 0x1c,
    0x56, 0xe2, 0x97, 0x0c, 0x44, 0x1c, 0xd1, 0x82, 0x2e, 0x75, 0xaf, 0xb5,
    0xa7, 0xda, 0x87, 0x0e, 0x49, 0xc0, 0x57, 0x51, 0xd7, 0x42, 0xbd, 0x4a,
    0xbc, 0x7c, 0xc2, 0x97, 0x08, 0x02, 0x5c, 0x40, 0xac, 0x9a, 0x92, 0x13,
    0xc1, 0x01, 0xef, 0xad, 0x6a, 0x17, 0x26, 0x1a, 0x45, 0x58, 0x26, 0xfb,
    0x27, 0xbe, 0x74, 0xef, 0xa6, 0x21, 0x9c, 0x6b, 0xc3, 0x67, 0x60, 0xd8,
    0xc7, 0xa3, 0xe1, 0x5f, 0x16, 0x99, 0x0b, 0xc3, 0xd8, 0xc1, 0x40, 0xda,
    0xf0, 0xc1, 0x33, 0xd2, 0xac, 0x80, 0xf7, 0xd7, 0xa2, 0x05, 0x18, 0x76,
    0xaf, 0x58, 0x8f, 0x09, 0xf5, 0xf2, 0xdf, 0x17, 0x48, 0x2b, 0xc5, 0xf8,
    0xe4, 0x09, 0x0f, 0x0d, 0x97, 0xbf, 0xcc, 0x4d, 0x50, 0xbe, 0x70, 0xa6,
    0xe5, 0xd6, 0xfd, 0x8c, 0x29, 0x49, 0x3f, 0x7c, 0x5e, 0x1b, 0x7f, 0x02,
    0xa3, 0xa9, 0x86, 0xc1, 0xe9, 0x32, 0x25, 0x53, 0x3e, 0x81, 0xf9, 0x95,
    0x20, 0x55, 0x09, 0x9f, 0x9b, 0x9d, 0xe3, 0x1a, 0xf3, 0x2e, 0x23, 0xac,
    0x0e};

const uint8_t kRsaPrivateKey[] = {
    0x30, 0x82, 0x01, 0x55, 0x02, 0x01, 0x00, 0x30, 0x0d, 0x06, 0x09, 0x2a,
    0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x04, 0x82,
    0x01, 0x3f, 0x30, 0x82, 0x01, 0x3b, 0x02, 0x01, 0x00, 0x02, 0x41, 0x00,
    0xbd, 0xc5, 0xe9, 0x32, 0x1c, 0xdc, 0x91, 0x18, 0xb2, 0xe8, 0x28, 0xf9,
    0xad, 0x9f, 0x3d, 0x4d, 0xd6, 0xf8, 0x4a, 0x6f, 0xfc, 0x57, 0x88, 0x5f,
    0x6d, 0x43, 0x0b, 0xce, 0x96, 0x62, 0x7a, 0x45, 0xb5, 0x6e, 0x2c, 0xac,
    0x5b, 0x73, 0xda, 0x83, 0x54, 0xcf, 0x22, 0xd4, 0xcc, 0x31, 0xd9, 0x75,
    0xbf, 0xa4, 0xff, 0xff, 0x1d, 0x71, 0x3d, 0xc8, 0x00, 0xec, 0xd4, 0x52,
    0x2d, 0xd1, 0xd9, 0xe3, 0x02, 0x03, 0x01, 0x00, 0x01, 0x02, 0x41, 0x00,
    0x8e, 0x1f, 0x3e, 0xe2, 0xa9, 0xdc, 0xc1, 0xc9, 0x86, 0x8a, 0xf9, 0xcc,
    0xeb, 0x2b, 0x5b, 0xa5, 0x04, 0xfe, 0x93, 0xf8, 0xc4, 0x39, 0xe5, 0xc6,
    0xd9, 0xb4, 0x21, 0x8e, 0x88, 0xef, 0x9d, 0x73, 0x77, 0x15, 0xac, 0xc6,
    0x08, 0x41, 0x57, 0xbe, 0x9b, 0x88, 0x05, 0xc2, 0x55, 0x7d, 0xa2, 0x09,
    0x4b, 0xd6, 0x01, 0x08, 0xc3, 0xb3, 0xce, 0xb0, 0x2d, 0x3b, 0x4f, 0xa4,
    0xda, 0x15, 0xa7, 0x39, 0x02, 0x21, 0x00, 0xe0, 0xb8, 0x35, 0x56, 0xe8,
    0xf0, 0x54, 0x21, 0x65, 0x2e, 0x32, 0x5c, 0xcd, 0x4c, 0xf3, 0xa9, 0x0c,
    0x97, 0x8e, 0xc5, 0x03, 0xdb, 0xa2, 0xff, 0xf3, 0x94, 0x7d, 0xb8, 0x65,
    0x01, 0xdc, 0x35, 0x02, 0x21, 0x00, 0xd8, 0x30, 0x66, 0x21, 0x79, 0xec,
    0x6e, 0x82, 0x81, 0xf8, 0xe1, 0xef, 0x7a, 0xbe, 0xbd, 0xa7, 0x48, 0x0d,
    0x79, 0x69, 0x6f, 0x70, 0x97, 0x3d, 0x6e, 0x30, 0xd5, 0x7d, 0xd2, 0xd5,
    0xb0, 0xb7, 0x02, 0x21, 0x00, 0x8f, 0xb5, 0x5d, 0xef, 0x19, 0x82, 0x6f,
    0xda, 0xf7, 0x70, 0xc6, 0xa6, 0x50, 0x68, 0x70, 0xbe, 0x60, 0x1e, 0x20,
    0x20, 0x60, 0x2a, 0x3a, 0xa0, 0x42, 0x6e, 0x68, 0xc3, 0xde, 0x5c, 0x85,
    0x2d, 0x02, 0x20, 0x03, 0xe5, 0x53, 0x61, 0xd5, 0x0d, 0xa2, 0xac, 0x2d,
    0x65, 0x6b, 0xc4, 0xe2, 0x04, 0x5f, 0xec, 0x8c, 0xca, 0xd9, 0x5e, 0x42,
    0x08, 0xd8, 0x60, 0xde, 0x04, 0x79, 0x44, 0x6c, 0x31, 0x37, 0x9f, 0x02,
    0x20, 0x60, 0x9c, 0x69, 0xfa, 0x11, 0xad, 0x42, 0xac, 0x33, 0xae, 0x88,
    0x4a, 0x0d, 0x08, 0x4c, 0x8d, 0x38, 0x1b, 0xd5, 0x7f, 0xc3, 0xec, 0x0c,
    0xc7, 0xdd, 0x70, 0x8c, 0x41, 0x01, 0xf9, 0x00, 0x73};

const uint8_t kEcPrivateKey[] = {
    0x30, 0x81, 0x87, 0x02, 0x01, 0x00, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86,
    0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d,
    0x03, 0x01, 0x07, 0x04, 0x6d, 0x30, 0x6b, 0x02, 0x01, 0x01, 0x04, 0x20,
    0xc9, 0xaf, 0xa9, 0xd8, 0x45, 0xba, 0x75, 0x16, 0x6b, 0x5c, 0x21, 0x57,
    0x67, 0xb1, 0xd6, 0x93, 0x4e, 0x50, 0xc3, 0xdb, 0x36, 0xe8, 0x9b, 0x12,
    0x7b, 0x8a, 0x62, 0x2b, 0x12, 0x0f, 0x67, 0x21, 0xa1, 0x44, 0x03, 0x42,
    0x00, 0x04, 0x60, 0xfe, 0xd4, 0xba, 0x25, 0x5a, 0x9d, 0x31, 0xc9, 0x61,
    0xeb, 0x74, 0xc6, 0x35, 0x6d, 0x68, 0xc0, 0x49, 0xb8, 0x92, 0x3b, 0x61,
    0xfa, 0x6c, 0xe6, 0x69, 0x62, 0x2e, 0x60, 0xf2, 0x9f, 0xb6, 0x79, 0x03,
    0xfe, 0x10, 0x08, 0xb8, 0xbc, 0x99, 0xa4, 0x1a, 0xe9, 0xe9, 0x56, 0x28,
    0xbc, 0x64, 0xf2, 0xf1, 0xb2, 0x0c, 0x2d, 0x7e, 0x9f, 0x51, 0x77, 0xa3,
    0xc2, 0x94, 0xd4, 0x46, 0x22, 0x99};

// TODO merge this with digest tool
static bool ComputeDigest(std::istream &is, ScopedPK11Context &hashCtx) {
  while (is) {
    unsigned char buf[4096];
    is.read(reinterpret_cast<char *>(buf), sizeof(buf));
    if (is.fail() && !is.eof()) {
      std::cerr << "Error reading from input stream." << std::endl;
      return false;
    }
    SECStatus rv = PK11_DigestOp(hashCtx.get(), buf, is.gcount());
    if (rv != SECSuccess) {
      std::cerr << "PK11_DigestOp failed." << std::endl;
      return false;
    }
  }

  return true;
}

// TODO merge this with digest tool
static bool Digest(std::string &input, std::string &output) {
  // no need for a db when calculating hash sum
  SECStatus rv = NSS_NoDB_Init(".");
  if (rv != SECSuccess) {
    std::cerr << "NSS init failed!" << std::endl;
    return false;
  }

  SECOidData *hashOID = SECOID_FindOIDByTag(SEC_OID_SHA256);
  if (hashOID == nullptr) {
    std::cerr << "Error: hashOid null!" << std::endl;
    return false;
  }
  ScopedPK11Context hashCtx(PK11_CreateDigestContext(hashOID->offset));
  if (hashCtx == nullptr) {
    std::cerr << "Creating digest context failed with error: "
              << PR_ErrorToName(PR_GetError()) << std::endl;
    return false;
  }
  PK11_DigestBegin(hashCtx.get());

  std::istringstream sstream(input);
  if (!ComputeDigest(sstream, hashCtx)) {
    return false;
  }

  unsigned char digest[HASH_LENGTH_MAX];
  unsigned int len;
  rv = PK11_DigestFinal(hashCtx.get(), digest, &len, HASH_LENGTH_MAX);
  if (rv != SECSuccess || len == 0) {
    std::cerr << "Calculating final hash value failed." << std::endl;
    return false;
  }

  std::stringstream ss;
  for (unsigned int i = 0; i < len; i++) {
    ss << std::setw(2) << std::setfill('0') << std::hex
       << static_cast<int>(digest[i]);
  }
  output = ss.str();

  // shutdown nss
  if (NSS_Shutdown() != SECSuccess) {
    std::cerr << "NSS Shutdown failed!" << std::endl;
    // ommit a negative return value
  }

  return true;
}

class StdInputStreamManipulator {
 public:
  StdInputStreamManipulator(std::istringstream &newCin)
      : cinBuffer_(std::cin.rdbuf()) {
    std::cin.rdbuf(newCin.rdbuf());
  }

  ~StdInputStreamManipulator() { std::cin.rdbuf(cinBuffer_); }

 private:
  std::basic_streambuf<char> *cinBuffer_;
};

class DBToolTest : public ::testing::Test {
 protected:
  virtual void SetUp() {
    std::cout << "Creating db files in working dir: " << g_working_dir_path
              << std::endl;
    std::istringstream passwordInput("a\na\n");
    StdInputStreamManipulator manipulator(passwordInput);

    const std::vector<std::string> arguments = {"--create", "--path",
                                                g_working_dir_path};
    DBTool tool;
    EXPECT_TRUE(tool.Run(arguments));
  }

  virtual void TearDown() {
    std::cout << "Removing db files..." << std::endl;

    for (auto const &value : kDbFiles) {
      std::string dbFilePath = g_working_dir_path + pathSep + value;
      std::remove(dbFilePath.c_str());
    }
  }

  std::string CreateTempFile(const char *data, const unsigned int dataLength) {
    time_t t = time(0);
    std::string timestamp(ctime(&t));
    std::string fileName;
    if (!Digest(timestamp, fileName)) {
      std::cerr << "Warning: Getting filename for random file failed. Falling "
                   "back to default one."
                << std::endl;
      fileName = "tempfile";
    }

    std::string tmpFilePath = g_working_dir_path + pathSep + fileName;
    std::cout << "Using temporary file: " << tmpFilePath << std::endl;
    std::ofstream outfile(tmpFilePath, std::ofstream::binary);
    outfile.write(data, dataLength);
    outfile.close();

    return tmpFilePath;
  }

  void RunTool(const std::vector<std::string> arguments) {
    DBTool tool;
    EXPECT_TRUE(tool.Run(arguments));
  }

  void RunToolWithModifiedCin(std::istringstream &passwordInput,
                              const std::vector<std::string> arguments) {
    StdInputStreamManipulator manipulator(passwordInput);

    DBTool tool;
    EXPECT_TRUE(tool.Run(arguments));
  }

  void ImportKeyTest(const char *keyData, const unsigned int keyLength,
                     std::string keyName) {
    std::istringstream passwordInput("a\n");
    std::string keyToImportPath = CreateTempFile(keyData, keyLength);
    const std::vector<std::string> arguments = {
        "--import-key", keyToImportPath, "--name",
        keyName,        "--path",        g_working_dir_path};
    RunToolWithModifiedCin(passwordInput, arguments);

    std::remove(keyToImportPath.c_str());
  }
};

TEST_F(DBToolTest, ListCerts) {
  const std::vector<std::string> arguments = {"--list-certs", "--path",
                                              g_working_dir_path};
  RunTool(arguments);
}

TEST_F(DBToolTest, ListKeys) {
  std::istringstream passwordInput("a\n");
  const std::vector<std::string> arguments = {"--list-keys", "--path",
                                              g_working_dir_path};
  RunToolWithModifiedCin(passwordInput, arguments);
}

TEST_F(DBToolTest, ChangePassword) {
  std::istringstream passwordInput("a\nnewPw\nnewPw\n");
  const std::vector<std::string> arguments = {"--change-password", "--path",
                                              g_working_dir_path};
  RunToolWithModifiedCin(passwordInput, arguments);
}

TEST_F(DBToolTest, ImportCert) {
  std::string certToImportPath =
      CreateTempFile(reinterpret_cast<const char *>(kCertificateDerData),
                     sizeof(kCertificateDerData));
  const std::vector<std::string> arguments = {
      "--import-cert", certToImportPath, "--name",
      "myCert",        "--path",         g_working_dir_path};
  RunTool(arguments);

  std::remove(certToImportPath.c_str());
}

TEST_F(DBToolTest, ImportListDeleteCert) {
  std::string certName("myCert");
  std::string certToImportPath =
      CreateTempFile(reinterpret_cast<const char *>(kCertificateDerData),
                     sizeof(kCertificateDerData));
  const std::vector<std::string> importCertArguments = {
      "--import-cert", certToImportPath, "--name",
      certName,        "--path",         g_working_dir_path};

  DBTool tool;
  EXPECT_TRUE(tool.Run(importCertArguments));

  std::remove(certToImportPath.c_str());

  const std::vector<std::string> listCertArguments = {"--list-certs", "--path",
                                                      g_working_dir_path};
  EXPECT_TRUE(tool.Run(listCertArguments));

  const std::vector<std::string> deleteCertArguments = {
      "--delete-cert", certName, "--path", g_working_dir_path};
  EXPECT_TRUE(tool.Run(deleteCertArguments));
}

TEST_F(DBToolTest, ImportListDeleteKey) {
  std::string keyName("myKey");
  std::string keyToImportPath = CreateTempFile(
      reinterpret_cast<const char *>(kRsaPrivateKey), sizeof(kRsaPrivateKey));
  const std::vector<std::string> importKeyArguments = {
      "--import-key", keyToImportPath, "--name",
      keyName,        "--path",        g_working_dir_path};

  std::istringstream passwordInput("a\na\n");
  StdInputStreamManipulator manipulator(passwordInput);

  DBTool tool;
  EXPECT_TRUE(tool.Run(importKeyArguments));
  std::remove(keyToImportPath.c_str());

  const std::vector<std::string> listKeyArguments = {"--list-keys", "--path",
                                                     g_working_dir_path};
  tool.Run(listKeyArguments);

  const std::vector<std::string> deleteKeyArguments = {
      "--delete-key", keyName, "--path", g_working_dir_path};
  tool.Run(deleteKeyArguments);
}

TEST_F(DBToolTest, ImportRsaKey) {
  ImportKeyTest(reinterpret_cast<const char *>(kRsaPrivateKey),
                sizeof(kRsaPrivateKey), "rsaKey");
}

TEST_F(DBToolTest, ImportECKey) {
  ImportKeyTest(reinterpret_cast<const char *>(kEcPrivateKey),
                sizeof(kEcPrivateKey), "ecKey");
}

TEST_F(DBToolTest, WrongPathTest) {
  const std::vector<std::string> arguments = {"--create", "--path", "/foo"};
  DBTool tool;
  EXPECT_FALSE(tool.Run(arguments));
}

TEST_F(DBToolTest, WrongPassword) {
  std::istringstream passwordInput("wrongPassword\n");
  StdInputStreamManipulator manipulator(passwordInput);

  const std::vector<std::string> arguments = {"--list-keys", "--path",
                                              g_working_dir_path};
  DBTool tool;
  EXPECT_FALSE(tool.Run(arguments));
}

}  // namespace nss_test
